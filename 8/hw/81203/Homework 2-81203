#include<vector>
#include<iostream>
#include<queue>

using namespace std;


vector<int> BFS(const vector<vector<int>> graph, int source)
{
	
	queue<int> q;
	q.push(source);
	vector<int> minDistance(graph.size()+1, -1);
	minDistance[source] = 0;
	while (!q.empty())
	{
		int v = q.front();
		q.pop();

		for (int i = 0; i < graph[v].size(); i++)
		{
			if (minDistance[graph[v][i]] == -1)
			{
				minDistance[graph[v][i]] = minDistance[v] + 6;
				q.push(graph[v][i]);
			}
		}
	}
	return minDistance;
}

int main()
{
	int t, n, m, x, y, s;
	cin >> t;
	for (int i = 0; i < t; i++)
	{
		cin >> n >> m;
		vector<vector<int>> graph(n+1);

		for (int j = 0; j < m; j++)
		{
			cin >> x;
			cin >> y;
			graph[x].push_back(y);
			graph[y].push_back(x);
		}
		cin >> s;

		vector<int> results = BFS(graph, s);

		for (int j = 1; j <= n; j++)
			if (results[j] != 0)
				cout << results[j] << " ";
		cout << endl;
	}
	system("pause");
	return 0;
}
